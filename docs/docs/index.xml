<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Mock</title>
    <link>https://hello-world-example.github.io/Mock/docs/</link>
    <description>Recent content in Docs on Mock</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Mock/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/junit4/Rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/junit4/Rule/</guid>
      <description>@Rule 注解 一个 JUnit Rule 就是一个实现了 TestRule 的类，这些类的作用类似于 @Before、@After，是用来在每个测试方法的执行前后执行一些代码的一个方法。 @Before、@After 只能作用于一个类，如果同一个 setup 需要在两个类里面同时使用，那么你就要在两个测试类里面定义相同的@Before方法，然后里面写相同的代码，这就造成了代码重复。此外，JUnit Rule还能做一些 @Before、@After这些注解做不到的事情，那就是他们可以动态的获取将要运行的测试类、测试方法的信息。
除了 @Rule 外， @ClassRule 是类级别的，在执行一个测试类的时候只会调用一次被注解的 Rule。
内建实现  TemporaryFolder：测试可以创建文件与目录并且会在测试运行结束后将其删除。这对于那些与文件系统打交道且独立运行的测试来说很有用。 ExternalResource：这是一种资源使用模式，它会提前建立好资源并且会在测试结束后将其销毁。这对于那些使用socket、嵌入式服务器等资源的测试来说很有用。 ErrorCollector：可以让测试在失败后继续运行并在测试结束时报告所有错误。这对于那些需要验证大量独立条件的测试来说很有用（尽管这本身可能是个“test smell”）。 ExpectedException：可以在测试中指定期望的异常类型与消息。 Timeout：为类中的所有测试应用相同的超时时间。  使用示例 public class RuleTestDemo { // 使用Timeout这个Rule  @Rule public Timeout timeout = new Timeout(1000); @Test public void testMethod1() throws Exception { Thread.sleep(1001); } @Test public void testMethod2() throws Exception { Thread.sleep(999); } } 自定义示例 public class MethodNameRule implements TestRule { public Statement apply(final Statement base, final Description description) { return new Statement() { @Override public void evaluate() throws Throwable { //在测试方法运行之前做一些事情，在base.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/junit4/RunWith/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/junit4/RunWith/</guid>
      <description>@RunWith 注解  When a class is annotated with @RunWith or extends a class annotated with @RunWith, JUnit will invoke the class it references to run the tests in that class instead of the runner built into JUnit.
 JavaDoc for @RunWith http://junit.org/javadoc/latest/org/junit/runner/RunWith.html The default runner is BlockJUnit4ClassRunner which supersedes the older JUnit4ClassRunner Annotating a class with @RunWith(JUnit4.class) will always invoke the default JUnit 4 runner in the current version of JUnit, this class aliases the current default JUnit 4 class runner.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/Mock-Introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/Mock-Introduction/</guid>
      <description>Mock 简介 Mock 测试是单元测试的重要方法之一
什么是 Mock 测试 Mock 测试就是在测试过程中，对于某些不容易构造（如 HttpServletRequest 必须在Servlet 容器中才能构造出来）或者不容易获取比较复杂的对象（如 JDBC 中的 ResultSet 对象），用一个虚拟的对象（Mock 对象）来创建以便测试的测试方法。
Mock 最大的功能是帮你把单元测试的耦合分解开，如果你的代码对另一个类或者接口有依赖，它能够帮你模拟这些依赖，并帮你验证所调用的依赖的行为。
比如一段代码有这样的依赖：
 当我们需要测试A类的时候，如果没有 Mock，则我们需要把整个依赖树都构建出来，而使用 Mock 的话就可以将结构分解开，像下面这样：
 Mock 对象使用范畴  真实对象具有不可确定的行为，产生不可预测的效果，（如：股票行情，天气预报） 真实对象很难被创建的 真实对象的某些行为很难被触发 真实对象实际上还不存在的（和其他开发小组或者和新的硬件打交道） &amp;hellip;  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/mockito/in-action/DAO-Simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/mockito/in-action/DAO-Simple/</guid>
      <description>Mock 持久层依赖 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.10.19&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.24.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.54chen&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;paoding-rose-jade&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 项目结构 src/java/xyz.kail.demo ├── dao │ └── AccountDAO.java ├── exception │ └── IllegalAccountException.java ├── model │ └── AccountVO.java └── service └── AccountService.java AccountVO.java import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor public class AccountVO { /** * 账户名(唯一) */ private String uname; /** * 账户密码 */ private String passwd; public AccountVO(String uname) { this.uname = uname; } public AccountVO(String uname, String passwd) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/mockito/Java-Doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/mockito/Java-Doc/</guid>
      <description>Java Doc 中文 官方教程 Java Doc</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/mockito/Mockito-Tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/mockito/Mockito-Tutorial/</guid>
      <description>Mockito 教程  原文： https://www.cnblogs.com/Ming8006/p/6297333.html
 1.0 Mockito 介绍 [3] 1.1 Mockito是什么？ Mockito 是 Mock 框架，它让你用简洁的 API 做测试。而且 Mockito 简单易学，它可读性强、验证语法简洁。
1.2 为什么需要Mock 测试驱动的开发( TDD) 要求我们先写单元测试，再写实现代码。在写单元测试的过程中，我们往往会遇到要测试的类有很多依赖，这些依赖的类、对象、资源又有别的依赖，从而形成一个大的依赖树，要在单元测试的环境中完整地构建这样的依赖，是一件很困难的事情。
1.3 Stub 和 Mock 异同[1]  相同：Stub 和 Mock 都是模拟外部依赖 不同：Stub 是完全模拟一个外部依赖， 而 Mock 还可以用来判断测试通过还是失败  1.4 使用场景  提前创建测试 TDD（测试驱动开发） 团队可以并行工作 你可以创建一个验证或者演示程序 为无法访问的资源编写测试 Mock 可以交给用户 隔离系统  2 使用Mockito [2] [4] 添加 Maven 依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mockito-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.10.19&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 添加 JUnit依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/powermock/Introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/powermock/Introduction/</guid>
      <description>PowerMock 简介 Mockito 不能 mock 静态、final、私有方法 等，PowerMock 能够完美的弥补 Mockito 的不足。
PowerMock 使用一个 自定义类加载器 和 字节码操作 来模拟
 静态方法 构造函数 final 类 和 方法 私有方法 去 除静态初始化器 &amp;hellip;  @PrepareForTest 这个注解告诉 PowerMock 准备测试某些类，需要使用此注解定义的类通常是需要进行字节码操作的类，包括带有 final、private、static 或 native方法 的类。
这个注解可以放在 测试类 或者 单独的测试方法 中。
 如果放在一个类上，这个测试类中的所有测试方法都将由 PowerMock处理 如果要为单个方法重写此行为，只需在特定测试方法上放置 @PrepareForTest 注解。例如，如果您想在测试方法A中修改类X，但在测试方法B中希望X完好无损，那么这很有用。在这种情况下，您在方法B上放置@PrepareForTest，并从value()列表中排除类X 有时你需要准备内部类来进行测试，这可以通过提供应该模拟到 fullyQualifiedNames() 列表的内部类的完全限定名来完成  Target( { ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited public @interface PrepareForTest { Class&amp;lt;?&amp;gt;[] value() default IndicateReloadClass.class; String[] fullyQualifiedNames() default &amp;#34;&amp;#34;; ByteCodeFramework byteCodeFramework() default ByteCodeFramework.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Mock/docs/spring-test/MockMvc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Mock/docs/spring-test/MockMvc/</guid>
      <description>MockMvc 简介  MockMvc 不需要启动 Web 容器 测试方式基于 单元测试 和 集成测试 之间  静态导入 // 构造 MockMvc 测试环境，如：增加 Filter、Interceptors、ControllerAdvice 等 import org.springframework.test.web.servlet.setup.MockMvcBuilders.*; // 创建 请求信息，如：url、header、cookie 等 import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; // Assert 断言操作，如：MockMvcResultMatchers.status().is(200) 断言 import org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; // Mock Response 处理方式，如： MockMvcResultHandlers.print() 打印响应信息到控制台 import org.springframework.test.web.servlet.result.MockMvcResultHandlers.*; 主要流程  MockMvcBuilders.* 创建 MockMvc mockMvc.perform(RequestBuilder) 执行 MockMvcRequestBuilders.* 构造的请求信息 MockMvcResultMatchers.* 对响应结果进行断言  standaloneSetup 方式  该方法更接近与 单元测试
 MockMvc mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build(); 如果只是为了测试 Filter、Interceptors 等，不测试 HelloController 逻辑，可以 Mock HelloController</description>
    </item>
    
  </channel>
</rss>